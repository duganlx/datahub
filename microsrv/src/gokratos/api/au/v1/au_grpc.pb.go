// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: api/au/v1/au.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AssetUnit_SayHello_FullMethodName   = "/au.v1.AssetUnit/SayHello"
	AssetUnit_PlaceOrder_FullMethodName = "/au.v1.AssetUnit/PlaceOrder"
)

// AssetUnitClient is the client API for AssetUnit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetUnitClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderReply, error)
}

type assetUnitClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetUnitClient(cc grpc.ClientConnInterface) AssetUnitClient {
	return &assetUnitClient{cc}
}

func (c *assetUnitClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, AssetUnit_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetUnitClient) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderReply, error) {
	out := new(PlaceOrderReply)
	err := c.cc.Invoke(ctx, AssetUnit_PlaceOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetUnitServer is the server API for AssetUnit service.
// All implementations must embed UnimplementedAssetUnitServer
// for forward compatibility
type AssetUnitServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	PlaceOrder(context.Context, *PlaceOrderRequest) (*PlaceOrderReply, error)
	mustEmbedUnimplementedAssetUnitServer()
}

// UnimplementedAssetUnitServer must be embedded to have forward compatible implementations.
type UnimplementedAssetUnitServer struct {
}

func (UnimplementedAssetUnitServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedAssetUnitServer) PlaceOrder(context.Context, *PlaceOrderRequest) (*PlaceOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedAssetUnitServer) mustEmbedUnimplementedAssetUnitServer() {}

// UnsafeAssetUnitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetUnitServer will
// result in compilation errors.
type UnsafeAssetUnitServer interface {
	mustEmbedUnimplementedAssetUnitServer()
}

func RegisterAssetUnitServer(s grpc.ServiceRegistrar, srv AssetUnitServer) {
	s.RegisterService(&AssetUnit_ServiceDesc, srv)
}

func _AssetUnit_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetUnitServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetUnit_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetUnitServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetUnit_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetUnitServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetUnit_PlaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetUnitServer).PlaceOrder(ctx, req.(*PlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetUnit_ServiceDesc is the grpc.ServiceDesc for AssetUnit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetUnit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "au.v1.AssetUnit",
	HandlerType: (*AssetUnitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _AssetUnit_SayHello_Handler,
		},
		{
			MethodName: "PlaceOrder",
			Handler:    _AssetUnit_PlaceOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/au/v1/au.proto",
}
